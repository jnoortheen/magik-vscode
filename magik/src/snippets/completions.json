{
  "ae\tan_element()": "an_element()$0",
  "as_symbol": "as_symbol()$0",
  "fe\tfast_elements": "fast_elements()$0",
  "fk\tfast_keys": "fast_elements()$0",
  "fke\tfast_keys_and_elements": "fast_keys_and_elements()$0",
  "ancestor_parents": "ancestor_parents$0",
  "apropos": "apropos(\"$1\", ${2:_true}, ${3:_true})",
  "as_sliced_string": "as_sliced_string(${1:length}, ${2:_true})$0",
  "class_name": "class_name$0",
  "copy": "copy()$0",
  "does_not_understand": "does_not_understand(message,private?)",
  "debug_print_on": "debug_print_on(${1:a_stream})",
  "deep_copy": "deep_copy()$0",
  "default": "default($1)$0",
  "define_metadata": "define_metadata(${1:key},${2:value})",
  "define_show_attributes": "define_show_attributes(${1:_gather} ${2:list})$0",
  "dependents_set": "dependents_set(${1:force_existence?})$0",
  "do_deep_copy": "do_deep_copy()$0",
  "error": "error(${1:_gather} ${2:args})$0",
  "exemplar_global": "exemplar_global$0",
  "global_auto_declare": "!global_auto_declare?! << ${1:_false}\n\\$",
  "has_dependents": "has_dependents?(${1:aspect})",
  "have_post_mortem": "have_post_mortem(${1:yes?})",
  "identity_hash": "identity_hash$0",
  "immediate_children": "immediate_children$0",
  "immediate_parents": "immediate_parents$0",
  "inheriting_children": "inheriting_children$0",
  "inherits_from": "inherits_from?(${1:thing})",
  "is_a_datastore_object": "is_a_datastore_object?$0",
  "is_class_of": "is_class_of?(${1:another})",
  "is_class_or_direct_subclass_of": "is_class_or_direct_subclass_of?(${1:an_object})",
  "is_kind_of": "is_kind_of?(${1:thing})",
  "metadata": "metadata(${1:key})",
  "method\tmethod(name)": "method(${1:name})$0",
  "method_table": "method_table$0",
  "module_name": "module_name$0",
  "naturally_ordered": "naturally_ordered?$0",
  "notify": "notify(${1:all?})",
  "perform": "perform(${1:selector}, $2)$0",
  "perform_message": "perform_message(${1:a_message})",
  "perform_with_vector": "perform_with_vector(${1:selector},${2:arg_vector})",
  "post_mortem": "post_mortem()$0",
  "primitive_failed": "primitive_failed(${1:selector}, ${2:optional condition_values})$0",
  "print_attributes_on": "print_attributes_on(${1:a_stream})",
  "print_string": "print_string$0",
  "product_name": "product_name$0",
  "product_directory": "smallworld_product.product(:${1:product_name}).directory$0",
  "prt": "print($1)$0",
  "putenv": "system.putenv('$1', '$2')$0",
  "remove_method": "remove_method(name)",
  "responds_to": "responds_to?(:|${1:message_name}|, ${2: optional private?})",
  "save_and_replace_method": "sys!save_and_replace_method(${1:method_name}, ${2:new_method_proc_or_value},  ${3:optional private?})",
  "send_error": "sys!send_error(${1:selector}, ${2:method_table}, ${3:private?}, ${4:error}, ${5:args})",
  "shallow_copy": "shallow_copy()$0",
  "show_on": "show_on(${1:a_stream})$0",
  "species": "species$0",
  "too_few_args": "too_few_args(${1:message}, ${2:private?})$0",
  "trace_on": "trace_on(${1:stream}, ${2:optional expand_n})$0",
  "veto_change": "veto_change?(who_wants_to_change,what_to_change,change_info, gather more_change_info)",
  "wait": "wait()$0",
  "write_on": "write_on(${1:a_stream})$0",
  "yourself": "yourself$0",
  "and": "_and ($1)$0",
  "andif": "_andif ($1)$0",
  "block": "_block ${1:@label}\n\t${2}\n_endblock\n$0",
  "catch": "_catch ${1:@label}\n$2\n_endcatch\n$0",
  "catch\twith_throw": "_catch ${1:@label}\n$2\n_throw $3 _with ${4:return}\n$5\n_endcatch\n$0",
  "catch\tspecial_error_log": "_local ${1:tag} << \"${2:error}\".copy()\n(${3:cond}, ${4:traceback_proc}) <<\n_catch ${1:tag}\n\t_handling ${2:error}\n\t_with throw_proc_with_captured_traceback(${1:tag})\n\t$7\n\n_endcatch\n_if ${3:cond} _isnt _unset\n_then\n\t${5:logger_obj}.add_error_log(\"${6:msg}\", ${3:cond}, ${4:traceback_proc})\n_endif\n$0",
  "continuewith": "_continue ${1:@label} _with ${2:val}\n",
  "create_slot": "{:${1:class_var_name}, ${2:_unset}, :${3:writable}},$0",
  "define_shared_constant": "_pragma(classify_level=${1:basic}, topic={${2:basic}}, usage={${3:basic}})\n${4:class_name}.define_shared_constant(:${5:shared_constant_name},\n\t##\n\t## ${7:shared constant docstring} \n\t##\n\n\t${8:constant_value},\n\t:${9:public})\n\\$\n",
  "define_shared_variable": "_pragma(classify_level=${1:basic}, topic={${2:basic}}, usage={${3:basic}})\n${4:class_name}.define_shared_variable(:${5:shared_variable_name},\n\t##\n\t## ${7:shared variable docstring} \n\t##\n\n\t${8:variable_value},\n\t:${9:public})\n\\$\n",
  "elif": "_elif ${1:condition}\n_then\n\t",
  "else": "_else\n\t",
  "encode": "#% text_encoding = ${1:iso8859_1}\n$0",
  "endif": "_endif\n",
  "finally": "_finally _with ${2:val}\n$0",
  "for": "_for ${1:a_val} _over ${2:collections}.${3:fast_elements}()$4\n_loop\n\t$5\n_endloop\n$0",
  "for\tkeys_and_elements": "_for ${1:a_val} _over ${2:collections}.${3:fast_keys_and_elements}()$4\n_loop\n\t$5\n_endloop\n$0",
  "global": "_global",
  "global\tsnippet": "_global ${1:variable_name}\n${1:variable_name} << ${3:variable_value}\n$0",
  "handling": "_handling ${1:error}\n_with _proc(${3:cond})\n\t$4\n_endproc$0",
  "handling\tdatabase_pool_in_use": "_handling dataset_pool_in_use\n_with _proc@suppressproc() _endproc$0",
  "if": "_if ${1:condition}\n_then\n\t$2\n_endif\n$0",
  "ife": "_if ${1:condition}\n_then\n\t$2\n_else\n\t$3\n_endif\n$0",
  "ifel": "_if ${1:condition1}\n_then\n\t$2\n_elif ${3:condition2}\n_then\n\t$4\n_endif\n$0",
  "ifele": "_if ${1:condition1}\n_then\n\t$2\n_elif ${3:condition2}\n_then\n\t$4\n_else\n\t$5\n_endif\n$0",
  "is": "_is ${1:_unset}$0",
  "isnt": "_isnt ${1:_unset}$0",
  "leavewith": "_leave ${1:@label} _with ${2:val}\n",
  "local": "_local",
  "local\tsnippet": "_local $1 << $2 $0",
  "lock": "_lock ${1:expression}\n$2\n_endlock\n",
  "loop": "_loop\n\t$1\n_endloop\n",
  "method\tinit": "_pragma(classify_level=${1:basic}, topic={${2:basic}}, usage={${3:basic}})\n_method ${4:class_name}.init(${6:arg1}, $7)\n\t##\n\t## ${8:exemplar init method} \n\t##\n\t## Input parameters:\n\t## ${6:arg1} - $9 \n\t## $10 \n\n\t$0\n\t_return _self\n_endmethod\n\\$\n",
  "method\tnew": "_pragma(classify_level=${1:basic}, topic={${2:basic}}, usage={${3:basic}})\n_method ${4:class_name}.new(${6:arg1}, $7)\n\t##\n\t## ${8:exemplar new method} \n\t##\n\t## Input parameters:\n\t## ${6:arg1} - $9 \n\t## $10 \n\n\t_return _clone.init(${6:arg1}, $7)\n_endmethod\n\\$\n",
  "method\tsnippet": "_pragma(classify_level=${1:basic}, topic={${2:basic}}, usage={${3:basic}})\n_method ${4:class_name}.${5:method_name}(${6:arg1}, $7)\n\t##\n\t## ${8:method description} \n\t##\n\t## Input parameters:\n\t## ${6:arg1} - $9 \n\t## $10 \n\n\t$0\n_endmethod\n\\$\n",
  "or": "_or ($1)$0",
  "orif": "_orif ($1)$0",
  "over": "_over ${1:range}\n_loop ${2:params}\n\t$3\n_endloop\n",
  "package": "_package ${1:sw}\n\\$\n$0",
  "pragma": "_pragma(classify_level=${1:basic}, topic={${2:basic}}, usage={${3:basic}})\n",
  "proc": "${1:variable} << _proc@${2:name}(${3:args})\n\t\t$4\n\t_endproc",
  "protect": "_protect\n\t$1\n_protection$2\n\t$3\n_endprotect\n",
  "protect\twith_locking": "_protect _locking ${1:expression}\n\t$2\n_protection$2\n\t$4\n_endprotect\n",
  "remex": "remex(:$1)\n\\$\n$0",
  "scatter": "_scatter ${1:vector}$0",
  "throw": "_throw ${1:expression} _with ${2:val}\n",
  "try": "_try _with ${1:cond}\n\t$2\n_when ${3:error}\n\t$4\n_endtry\n",
  "when": "_when ${1:error}$0",
  "with": "_with ${1:cond}$0",
  "xor": "_xor ($1)$0",
  "abstract": "_abstract ",
  "allresults": "_allresults ",
  "clone": "_clone ",
  "constant": "_constant ",
  "continue": "_continue ",
  "div": "_div ",
  "dynamic": "_dynamic ",
  "false": "_false",
  "gather": "_gather ",
  "import": "_import ",
  "iter": "_iter ",
  "leave": "_leave ",
  "loopbody": "_loopbody ",
  "maybe": "_maybe ",
  "mod": "_mod ",
  "no_way": "_no_way ",
  "not": "_not ",
  "optional": "_optional ",
  "private": "_private ",
  "protection": "_protection ",
  "recursive": "_recursive ",
  "return": "_return ",
  "self": "_self",
  "super": "_super.",
  "then": "_then ",
  "thisthread": "_thisthread",
  "true": "_true",
  "unset": "_unset",
  "app\tappication": "smallworld_product.application(:${1:npcl_sweo_dm_user})$0",
  "cad\tcurrent_alternative_details": "current_alternative_details$0",
  "cds\tcis_dataset": "gis_program_manager.cached_dataset(:cis)$0",
  "cds\tassignment": "cds << gis_program_manager.cached_dataset(:cis)$0",
  "conddefine\tdefine_condition_class": "condition.define_condition(\n\t:${1:new_cond_name}, :${2:parent_condition_name},\n\t{:${3:arg1}, $4},\n\t'${5:message that to be printed when condition is raised}' )\n\\$",
  "condraise\traise a condition": "condition.raise(:${1:error}, :${2:string}, \"${3:message}$4\")\n$0",
  "dp\tdebug_print": "debug_print($1)$0",
  "dsn\tactive_design": "swg_dsn_admin_engine.active_design",
  "eds\telectric_dataset": "gis_program_manager.cached_dataset(:electric)$0",
  "eds\tassignment": "eds << gis_program_manager.cached_dataset(:electric)$0",
  "egs\tequality_geometry_set": "equality_geometry_set.new()",
  "eng\tadmin_engine": "swg_dsn_admin_engine",
  "epl\tequality_property_list": "equality_property_list.new()",
  "erp\tequality_rope": "equality_rope.new()",
  "eset\tequality_set": "equality_set.new()",
  "fixme": "# FIXME ${1:issue} added by ${2:tester_name} on ${3:01}/${4:06}/${5:2016}\n$0",
  "gds": "gis_program_manager.cached_dataset(:gis)",
  "gds\tassignment": "gis_program_manager.cached_dataset(:gis)",
  "get_ns": ".read_stream().get_n(${1:10})$0",
  "getenv": "system.getenv('$1')$0",
  "gpm": "gis_program_manager",
  "gpmds": "gis_program_manager.cached_dataset(:${1:gis})$0",
  "gpmdscoll": "gis_program_manager.cached_dataset(:${1:gis}).collections[:${2:sheath}]$0",
  "lds": "gis_program_manager.cached_dataset(:land)",
  "load_file": "load_file(\"${1:dir_name}${2:\\}${3:file_name}.magik\")$0",
  "load_file_list": "load_file_list('${1:dir_name}')$0",
  "logd": "logger.debug(write_string('$1', $2), ${3:.logger_name})\n$0",
  "loge": "logger.error(write_string('$1', $2), ${3:.logger_name})\n$0",
  "logi": "logger.info(write_string('$1', $2), ${3:.logger_name})\n$0",
  "logw": "logger.warn(write_string('$1', $2), ${3:.logger_name})\n$0",
  "p\tprint": "print($1)$0",
  "pln\tproperty_list.new": "property_list.new()",
  "plnw\tproperty_list.new_with": "property_list.new_with($1)$0",
  "pa\tprint_ancestry": "print_ancestry($1)$0",
  "ph\tprint_hierarchy": "print_hierarchy($1)$0",
  "quit": "quit()",
  "rope": "rope.new()",
  "rt\trecord_insert": "${1:rt} << record_transaction.new_insert(${2:coll}, ${3:plist})$0",
  "rt\trecord_update": "${1:rt} << record_transaction.new_update(${2:obj}, ${3:plist})$0",
  "rt\trecord_delete": "${1:rt} << record_transaction.new_update(${2:obj})$0",
  "sdae": "swg_dsn_admin_engine",
  "smd\tmodule_dialog": "sw_module_dialog.open()",
  "start_app": "start_application_manager()$0",
  "sview": "gis_program_manager.scratch_view",
  "sw_mod": "sw_modue_dialog.open()",
  "w-hash": "write('### ', $1, ' ###')$0",
  "w-minus": "write('--- ', $1, ' ---')$0",
  "w-plus": "write('+++ ', $1, ' +++')$0",
  "w-star": "write('*** ', $1, ' ***')$0",
  "w\twrite": "write($1)$0",
  "ws\twrite_string()": "write_string('$1', $2)$0"
}